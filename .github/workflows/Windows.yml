name: Build Windows Native Image with GluonFX

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-windows-native:
    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      # Checkout your code
      - uses: actions/checkout@v4

      # Setup the Windows build environment
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Visual Studio shell
        uses: egor-tensin/vs-shell@v1

      # Make sure the latest GraalVM is installed.
      # after this step env.JAVA_HOME and env.GRAALVM_HOME will point to the GraalVM location
      - name: Setup GraalVM built by Gluon
        uses: gluonhq/setup-graalvm@master
        # set GITHUB_TOKEN to avoid exceeding GitHub's API rate limit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a staging directory where the binary will be copied into
      - name: Make staging directory
        run: mkdir staging

      # Build your project using Maven
      # The desktop profile is used, which means a native build will be created for the host platform (in this case Windows) itself.
      - name: Gluon Build
        run: mvn -Pdesktop gluonfx:build gluonfx:package

      - name: Generate version and tag
        id: version
        shell: pwsh
        run: |
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          $version = "1.0.0-$timestamp"
          $tag = "1.0.0-release-$timestamp"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "timestamp=$timestamp"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$version"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "tag=$tag"


      #- name: List files after native image
      #  run: |
      #    echo "=== Repository root contents ==="
      #    Get-ChildItem -Force
      #    echo ""
      #    echo "=== Target directory contents ==="
      #    if (Test-Path "target") {
      #      Get-ChildItem -Recurse target | Select-Object FullName
      #    } else {
      #      echo "target directory not found"
      #    }
      #    echo ""
      #    echo "=== JavaFX DLL directory contents ==="
      #    if (Test-Path "javafx-dlls") {
      #      Get-ChildItem -Recurse javafx-dlls | Select-Object FullName
      #    } else {
      #      echo "javafx-dlls directory not found"
      #    }

      - name: Build release package
        id: archive
        shell: pwsh
        run: |
          $releaseDir = "staging"
          New-Item -ItemType Directory -Force -Path $releaseDir
          $archiveName = "LUYViewer-Windows-${{ steps.version.outputs.version }}.zip"
          Copy-Item "config.jsonc" "$releaseDir/"
          Copy-Item "LUYViewer.bat" "$releaseDir/"
          Copy-Item "README.md" "$releaseDir/"
          Copy-Item "texts*.json" "$releaseDir/"
          Copy-Item "src\main\resources\style.css" "$releaseDir/"
          Copy-Item "src\main\resources\favicon.png" "$releaseDir/"
          Copy-Item "target\gluonfx\x86_64-windows\LUYViewer.exe" "$releaseDir/"
          # Create the archive
          Compress-Archive -Path "$releaseDir/*" -DestinationPath $archiveName -CompressionLevel Optimal
          echo "‚úì Created release archive: $archiveName"
          $archiveInfo = Get-Item $archiveName
          echo "Archive size: $(($archiveInfo.Length / 1MB).ToString('F1')) MB"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "archive_name=$archiveName"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "archive_path=$((Get-Item $archiveName).FullName)"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "LUYViewer Windows Release ${{ steps.version.outputs.version }}"
          body: |
            # LUYViewer Windows Native Binary Release
            
            **Version:** ${{ steps.version.outputs.version }}  
            **Build Time:** ${{ steps.version.outputs.timestamp }}  
            **Commit:** ${{ github.sha }}
            
            ## üöÄ Quick Start
            1. Download and extract ${{ steps.archive.outputs.archive_name }}
            2. Edit `config.jsonc` with your LUY server details
            3. Double-click LUYViewer.bat or LUYViewer.exe to start the application
            
            ## üì¶ What's Included
            - **LUYViewer.exe** - Native Windows binary (no Java required!)
            - **LUYViewer.bat** - Easy-to-use launcher script
            - **config.jsonc** - Configuration file
            - **style.css** - Stylesheet which can be applied for customization
            - **README.txt** - Detailed setup instructions
            
            ## ‚öôÔ∏è System Requirements
            - Windows 10 or later (x64)
            - No additional software required
            
            ## üêõ Troubleshooting
            If you encounter issues:
            1. Make sure all files are extracted to the same folder
            2. Check that `config.jsonc` is properly configured
            3. Run LUYViewer.bar from Command Prompt to see error messages
            4. Check the [Issues](https://github.com/${{ github.repository }}/issues) page
            
            ---
            
            **Build Information:**
            - Java Version: ${{ env.JAVA_VERSION }}
            - Platform: Windows x64
            - Build Method: GluonFX Native Build
          files: |
            ${{ steps.archive.outputs.archive_path }}
          draft: false
          prerelease: false
          generate_release_notes: true

      #- name: List files after native image
      #  run: |
      #    echo "=== Repository root contents ==="
      #    Get-ChildItem -Force
      #    echo ""
      #    echo "=== Target directory contents ==="
      #    if (Test-Path "target") {
      #      Get-ChildItem -Recurse target | Select-Object FullName
      #    } else {
      #      echo "target directory not found"
      #    }
      #    echo ""
      #    echo "=== JavaFX DLL directory contents ==="
      #    if (Test-Path "javafx-dlls") {
      #      Get-ChildItem -Recurse javafx-dlls | Select-Object FullName
      #    } else {
      #      echo "javafx-dlls directory not found"
      #    }
